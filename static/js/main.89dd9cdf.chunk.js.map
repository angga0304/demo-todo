{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","name","handleKeyPress","e","_this","setState","target","value","charCode","check","JSON","parse","localStorage","getItem","list","todo","checked","push","setItem","stringify","handleClicked","edit","deleteTodo","splice","editName","_this2","this","rendered","map","idx","react__WEBPACK_IMPORTED_MODULE_5___default","key","type","onChange","onClick","className","start","autocomplete","onKeyPress","Component","hot","module"],"mappings":"iOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,0HE/HbR,oNACJS,MAAQ,CACNC,KAAM,MAGRC,eAAiB,SAACC,GAEhB,GADAC,EAAKC,SAAS,CAACJ,KAAME,EAAEG,OAAOC,QACX,KAAfJ,EAAEK,SAAiB,CACrB,IAAIC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,aACxCC,EAAO,GACLC,EAAO,CACXd,KAAME,EAAEG,OAAOC,MACfS,SAAS,GAEPP,GACFA,EAAMQ,KAAKF,GACXD,EAAOL,GAEPK,EAAO,CAACC,GAEVX,EAAKC,SAAS,CAACJ,KAAM,KACrBW,aAAaM,QAAQ,WAAYR,KAAKS,UAAUL,QAIpDM,cAAgB,SAACjB,GACf,IAAIM,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,aACxCJ,EAAMN,EAAEG,OAAOC,OAAOS,QACxBP,EAAMN,EAAEG,OAAOC,OAAOS,SAAU,EAEhCP,EAAMN,EAAEG,OAAOC,OAAOS,SAAU,EAElCP,EAAMN,EAAEG,OAAOC,OAAOc,MAAO,EAC7BT,aAAaM,QAAQ,WAAYR,KAAKS,UAAUV,OAGlDa,WAAa,SAACnB,GACZ,IAAIM,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,aAC5CJ,EAAMc,OAAOpB,EAAEG,OAAOL,KAAK,GAC3BW,aAAaM,QAAQ,WAAYR,KAAKS,UAAUV,OAGlDe,SAAW,SAACrB,GACEO,KAAKC,MAAMC,aAAaC,QAAQ,sFAGrC,IAAAY,EAAAC,KAGDC,EAFQjB,KAAKC,MAAMC,aAAaC,QAAQ,aAEvBe,IAAI,SAACd,EAAMe,GAAP,OACzBC,EAAAzC,EAAAC,cAAA,OAAMyC,IAAKF,GAAKC,EAAAzC,EAAAC,cAAA,SAAOW,KAAK,WAAWM,MAAOsB,EAAKG,KAAK,WAAWhB,QAASF,EAAKE,QAASiB,SAAUR,EAAKL,gBAAzG,IAA4HU,EAAAzC,EAAAC,cAAA,aAAQwB,EAAKb,MAAzI,IAAuJ6B,EAAAzC,EAAAC,cAAA,SAAO0C,KAAK,SAASzB,MAAM,SAAS2B,QAAST,EAAKH,WAAYrB,KAAM4B,OAE7N,OACEC,EAAAzC,EAAAC,cAAA,OAAK6C,UAAU,OACbL,EAAAzC,EAAAC,cAAA,yBANa,EAMb,YAAoCoC,KAAK1B,MAAMoC,MAA/C,KACAN,EAAAzC,EAAAC,cAAA,SAAOW,KAAK,YAAYoC,aAAa,MAAMC,WAAYZ,KAAKxB,iBAC3DwB,KAAK1B,MAAMC,KACX0B,UAzDSY,cA+DHC,kBAAIC,EAAJD,CAAYjD","file":"static/js/main.89dd9cdf.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    name: \"\"\n  }\n\n  handleKeyPress = (e) => {\n    this.setState({name: e.target.value});\n    if (e.charCode === 13) {\n      let check = JSON.parse(localStorage.getItem('todoList'));\n      let list = [];\n      const todo = {\n        name: e.target.value,\n        checked: false\n      }\n      if (check) {\n        check.push(todo);\n        list = check;\n      } else {\n        list = [todo];\n      }\n      this.setState({name: ''});\n      localStorage.setItem('todoList', JSON.stringify(list));\n    }\n  };\n\n  handleClicked = (e) => {\n    let check = JSON.parse(localStorage.getItem('todoList'));\n    if (check[e.target.value].checked) {\n      check[e.target.value].checked = false;\n    } else {\n      check[e.target.value].checked = true;\n    }\n    check[e.target.value].edit = false;\n    localStorage.setItem('todoList', JSON.stringify(check));\n  };\n\n  deleteTodo = (e) => {\n    let check = JSON.parse(localStorage.getItem('todoList'));\n    check.splice(e.target.name,1);\n    localStorage.setItem('todoList', JSON.stringify(check));\n  }\n\n  editName = (e) => {\n    let check = JSON.parse(localStorage.getItem('todoList'));\n  }\n\n  render() {\n    const lists = JSON.parse(localStorage.getItem('todoList'));\n    const complete = 0;\n    const rendered = lists.map((list, idx) => \n      <div  key={idx}><input name=\"finished\" value={idx} type=\"checkbox\" checked={list.checked} onChange={this.handleClicked}  /> <label>{list.name}</label> <input type=\"button\" value='delete' onClick={this.deleteTodo} name={idx} /></div>\n    );\n    return (\n      <div className=\"App\">\n        <div> Complete: {complete}  Start: {this.state.start} </div>\n        <input name=\"inputTask\" autocomplete=\"off\" onKeyPress={this.handleKeyPress} />\n        {this.state.name}\n        {rendered}\n      </div>\n    );\n  }\n}\n\nexport default hot(module)(App);\n"],"sourceRoot":""}